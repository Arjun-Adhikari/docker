pipeline {
    agent any

    environment {
        // 1. REWRITE THIS: Replace 'your-dockerhub-username' with your actual Docker Hub username.
        //    'khalticloning' is your image name; you can keep it or change it.
        DOCKER_HUB_REPO = 'your-dockerhub-username/khalticloning'
        IMAGE_TAG = sh(returnStdout: true, script: 'echo ${BUILD_NUMBER}').trim()
    }

    stages {
        stage('Checkout Code') {
            steps {
                // 2. REWRITE THIS: Replace 'main' if your default branch is named differently (e.g., 'master').
                // 3. REWRITE THIS: Replace 'your-username/khalticloning.git' with your actual GitHub username and repository name.
                git branch: 'main', url: 'https://github.com/Arjun-Adhikari/docker.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_HUB_REPO}:${IMAGE_TAG}", "-f Dockerfile .")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // 4. IMPORTANT: The 'docker-hub-credentials' ID *must* match the ID you create in Jenkins Credentials.
                    //    You don't change this string here, but you create the credential with this ID in Jenkins.
                    withDockerRegistry(credentialsId: 'docker-hub-credentials', url: 'https://index.docker.io/v1/') {
                        docker.image("${DOCKER_HUB_REPO}:${IMAGE_TAG}").push()
                        docker.image("${DOCKER_HUB_REPO}:${IMAGE_TAG}").push("latest")
                    }
                }
            }
        }

        stage('Clean Up') {
            steps {
                script {
                    sh "docker rmi ${DOCKER_HUB_REPO}:${IMAGE_TAG} || true"
                    sh "docker rmi ${DOCKER_HUB_REPO}:latest || true"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline finished successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}